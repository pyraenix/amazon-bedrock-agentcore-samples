[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llamaindex-agentcore-browser-integration"
version = "0.1.0"
description = "LlamaIndex integration with Amazon Bedrock AgentCore Browser Tool"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AWS AgentCore Team", email = "agentcore-team@amazon.com"}
]
maintainers = [
    {name = "AWS AgentCore Team", email = "agentcore-team@amazon.com"}
]
keywords = [
    "llamaindex",
    "agentcore", 
    "browser-automation",
    "web-scraping",
    "captcha-solving",
    "aws",
    "bedrock",
    "ai-agents"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: AsyncIO",
    "Environment :: Web Environment"
]
requires-python = ">=3.12,<3.13"
dependencies = [
    "llama-index>=0.11.0",
    "llama-index-core>=0.11.0", 
    "llama-index-llms-bedrock>=0.2.0",
    "llama-index-multi-modal-llms-bedrock>=0.2.0",
    "boto3>=1.35.0",
    "botocore>=1.35.0",
    "aiohttp>=3.10.0",
    "aiofiles>=24.1.0",
    "pydantic>=2.9.0",
    "pyyaml>=6.0.2",
    "asyncio-throttle>=1.0.2",
    "pillow>=10.4.0",
    "structlog>=24.4.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "mypy>=1.11.0",
    "types-pyyaml>=6.0.12",
    "black>=24.8.0",
    "isort>=5.13.0",
    "flake8>=7.1.0",
    "ruff>=0.6.0",
    "pre-commit>=3.8.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0"
]
test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.0"
]
security = [
    "bandit>=1.7.0",
    "safety>=3.2.0"
]

[project.urls]
Homepage = "https://github.com/aws-samples/agentcore-samples"
Documentation = "https://docs.aws.amazon.com/bedrock/latest/userguide/agents.html"
Repository = "https://github.com/aws-samples/agentcore-samples"
"Bug Reports" = "https://github.com/aws-samples/agentcore-samples/issues"
Changelog = "https://github.com/aws-samples/agentcore-samples/blob/main/CHANGELOG.md"

[project.scripts]
llamaindex-agentcore = "llamaindex_agentcore_integration.cli:main"

[tool.setuptools]
packages = ["llamaindex_agentcore_integration"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md", "*.txt"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["llamaindex_agentcore_integration"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests", 
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "slow: marks tests as slow running"
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.coverage.run]
source = ["llamaindex_agentcore_integration"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.bandit]
exclude_dirs = ["tests", "venv"]
skips = ["B101", "B601"]